#version 410 core
// Define the shape of the abstract patch, the spacing and winding order.
layout(triangles, fractional_odd_spacing, ccw) in;

uniform mat4 viewProjection;
uniform mat4 model;
uniform float uWeight;
uniform float vWeight;
uniform float wWeight;
uniform float normalDist;

// Input arrays with position, color and normals of control points
in vec3 pos_TES[];
in vec4 color_TES[];
in vec3 normal_TES[];

// Output of this vertex's color and normal
out vec4 color_FRAG;
out vec3 normal_FRAG;

vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2)
{
    return vec4(gl_TessCoord.x) * v0 + vec4(gl_TessCoord.y) * v1 + vec4(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
    // Calculate the color of the vertex as the average of it's 3 control points.
    color_FRAG = interpolate4D(color_TES[0], color_TES[1], color_TES[2]);

    // Calculate the normal of the vertex as the average of it's 3 control points
    normal_FRAG = interpolate3D(normal_TES[0], normal_TES[1], normal_TES[2]);
    normal_FRAG = normalize(normal_FRAG);

    // Calculate the position of the vertex based on it's 3 control points.
    // The weight of each control point can be weighted differently to move the position around within the abstract patch
    gl_Position = (gl_TessCoord.x * gl_in[0].gl_Position * wWeight) + (gl_TessCoord.y * gl_in[1].gl_Position * uWeight) + (gl_TessCoord.z * gl_in[2].gl_Position * vWeight);

    // Move the position along the normal for more effects
    gl_Position += vec4(normal_FRAG * normalDist, 0.0f);

    // Apply the transformtions to the vertex
    gl_Position = viewProjection * model * gl_Position;
}